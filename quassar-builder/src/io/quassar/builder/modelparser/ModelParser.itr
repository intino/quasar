rule type(modelparser)
	package $package;

    import $package.$outDsl+firstUpperCase~Graph;
    import io.intino.magritte.builder.StashBuilder;

	import java.io.File;
    import java.io.IOException;
    import java.io.OutputStream;
    import java.io.ByteArrayOutputStream;
    import java.net.URISyntaxException;
    import java.net.URL;
    import java.net.http.HttpClient;
    import java.net.http.HttpRequest;
    import java.net.http.HttpResponse;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.time.Duration;
    import java.util.List;
    import java.util.stream.Stream;
    import java.util.zip.ZipEntry;
    import java.util.zip.ZipInputStream;

    public class ModelParser {
		public record Model($outDsl+firstUpperCase~Graph graph, String metadata, String parseLog){}

    	public static Model loadFromURL(URL url, String authToken) throws IOException, URISyntaxException {
			Path zip = Files.createTempFile("_picota", ".zip");
			authorizedDownload(url, authToken, zip);
			return loadFromZip(zip.toFile());
		}

    	public static Model loadFromURL(URL url) throws IOException {
        	Path zip = Files.createTempFile("_picota", ".zip");
			Files.write(zip, url.openStream().readAllBytes());
			return loadFromZip(zip.toFile());
		}

    	public static Model loadFromZip(File $outDsl~File) throws IOException {
			Path dir = unzip($outDsl~File);
			ByteArrayOutputStream stream = new ByteArrayOutputStream();
			try (Stream<Path> files = Files.walk(dir)) {
				$outDsl+firstUpperCase~Graph graph = load(files
						.filter(Files::isRegularFile)
						.filter(path -> !path.getFileName().toString().startsWith("."))
						.filter(path -> path.getFileName().toString().endsWith(".tara"))
						.map(Path::toFile)
						.toList(), stream);
				return new Model(graph, readManifest(new File(dir.toFile(), "manifest.json")), stream.toString());
			}
    	}

    	private static $outDsl+firstUpperCase~Graph load(List<File> $outDsl~Files, OutputStream log) {
    		io.intino.magritte.io.model.Stash[] stashes = new StashBuilder($outDsl~Files, "$outDslCoors", "parser", new java.io.PrintStream(log)).build();
    		return stashes == null ? null: $outDsl+firstUpperCase~Graph.load(stashes);
    	}

    	private static void authorizedDownload(URL url, String authToken, Path targetPath) throws IOException, URISyntaxException {
			HttpClient client = HttpClient.newBuilder().connectTimeout(Duration.ofSeconds(10)).build();
			HttpRequest request = HttpRequest.newBuilder()
					.uri(url.toURI())
					.timeout(Duration.ofMinutes(2))
					.header("Authorization", "Bearer " + authToken)
					.GET()
					.build();
			try {
				HttpResponse<Path> response = client.send(request, HttpResponse.BodyHandlers.ofFile(targetPath));
				if (response.statusCode() != 200) throw new RuntimeException("Error HTTP: " + response.statusCode());
			} catch (InterruptedException e) {
				throw new RuntimeException(e);
			}
		}

		private static String readManifest(File manifest) {
			try {
				return manifest.exists() ? Files.readString(manifest.toPath()) : null;
			} catch (IOException e) {
				return null;
			}
		}

    	private static Path unzip(java.io.File file) throws IOException {
			Path targetDir = Files.createTempDirectory("zip_extract_");
    		try (ZipInputStream zis = new ZipInputStream(Files.newInputStream(file.toPath()))) {
				ZipEntry entry;
				while ((entry = zis.getNextEntry()) != null) {
					Path newPath = resolveZipEntry(targetDir, entry);
					if (entry.isDirectory()) Files.createDirectories(newPath);
					else {
						Files.createDirectories(newPath.getParent());
						try (OutputStream os = Files.newOutputStream(newPath)) {
							zis.transferTo(os);
						}
					}
					zis.closeEntry();
				}
			}
			return targetDir;
    	}

		private static Path resolveZipEntry(Path targetDir, ZipEntry zipEntry) throws IOException {
			Path resolvedPath = targetDir.resolve(zipEntry.getName()).normalize();
			if (!resolvedPath.startsWith(targetDir)) throw new IOException("Invalid Entry: " + zipEntry.getName());
			return resolvedPath;
		}
    }