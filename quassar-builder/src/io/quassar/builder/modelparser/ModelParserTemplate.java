package io.quassar.builder.modelparser;

import io.intino.itrules.template.Rule;
import io.intino.itrules.template.Template;

import java.util.ArrayList;
import java.util.List;

import static io.intino.itrules.template.condition.predicates.Predicates.*;
import static io.intino.itrules.template.outputs.Outputs.*;

public class ModelParserTemplate extends Template {

	public List<Rule> ruleSet() {
		List<Rule> rules = new ArrayList<>();
		rules.add(rule().condition(allTypes("modelparser")).output(literal("package ")).output(placeholder("package")).output(literal(";\n\nimport ")).output(placeholder("package")).output(literal(".")).output(placeholder("outDsl", "firstUpperCase")).output(literal("Graph;\nimport io.intino.magritte.builder.StashBuilder;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.URISyntaxException;\nimport java.net.URL;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.time.Duration;\nimport java.util.List;\nimport java.util.stream.Stream;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\n\npublic class ModelParser {\n\tpublic static Model loadFromURL(URL url, String authToken) throws IOException, URISyntaxException {\n\t\tPath zip = Files.createTempFile(\"_picota\", \".zip\");\n\t\tauthorizedDownload(url, authToken, zip);\n\t\treturn loadFromZip(zip.toFile());\n\t}\n\n\tpublic static Model loadFromURL(URL url) throws IOException {\n    \tPath zip = Files.createTempFile(\"_picota\", \".zip\");\n\t\tFiles.write(zip, url.openStream().readAllBytes());\n\t\treturn loadFromZip(zip.toFile());\n\t}\n\n\tpublic record Model(")).output(placeholder("outDsl", "firstUpperCase")).output(literal("Graph graph, String metadata){}\n\n\tpublic static Model loadFromZip(File ")).output(placeholder("outDsl")).output(literal("File) throws IOException {\n\t\tPath dir = unzip(")).output(placeholder("outDsl")).output(literal("File);\n\t\ttry (Stream<Path> files = Files.walk(dir)) {\n\t\t\t")).output(placeholder("outDsl", "firstUpperCase")).output(literal("Graph graph = load(files\n\t\t\t\t\t.filter(Files::isRegularFile)\n\t\t\t\t\t.filter(path -> !path.getFileName().toString().startsWith(\".\"))\n\t\t\t\t\t.filter(path -> path.getFileName().toString().endsWith(\".tara\"))\n\t\t\t\t\t.map(Path::toFile)\n\t\t\t\t\t.toList());\n\t\t\treturn new Model(graph, readManifest(new File(dir.toFile(), \"manifest.json\")));\n\t\t}\n\t}\n\n\tpublic static ")).output(placeholder("outDsl", "firstUpperCase")).output(literal("Graph load(File... ")).output(placeholder("outDsl")).output(literal("File) {\n\t\treturn load(List.of(")).output(placeholder("outDsl")).output(literal("File));\n\t}\n\n\tpublic static ")).output(placeholder("outDsl", "firstUpperCase")).output(literal("Graph load(List<File> ")).output(placeholder("outDsl")).output(literal("Files) {\n\t\tio.intino.magritte.io.model.Stash[] stashes = new StashBuilder(")).output(placeholder("outDsl")).output(literal("Files, \"")).output(placeholder("outDslCoors")).output(literal("\", \"parser\", java.io.PrintStream.nullOutputStream()).build();\n\t\treturn stashes == null ? null: ")).output(placeholder("outDsl", "firstUpperCase")).output(literal("Graph.load(stashes);\n\t}\n\n\tpublic static void authorizedDownload(URL url, String authToken, Path targetPath) throws IOException, URISyntaxException {\n\t\tHttpClient client = HttpClient.newBuilder().connectTimeout(Duration.ofSeconds(10)).build();\n\t\tHttpRequest request = HttpRequest.newBuilder()\n\t\t\t\t.uri(url.toURI())\n\t\t\t\t.timeout(Duration.ofMinutes(2))\n\t\t\t\t.header(\"Authorization\", \"Bearer \" + authToken)\n\t\t\t\t.GET()\n\t\t\t\t.build();\n\t\ttry {\n\t\t\tHttpResponse<Path> response = client.send(request, HttpResponse.BodyHandlers.ofFile(targetPath));\n\t\t\tif (response.statusCode() != 200) throw new RuntimeException(\"Error HTTP: \" + response.statusCode());\n\t\t} catch (InterruptedException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\n\tprivate static String readManifest(File manifest) {\n\t\ttry {\n\t\t\treturn manifest.exists() ? Files.readString(manifest.toPath()) : null;\n\t\t} catch (IOException e) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tprivate static Path unzip(java.io.File file) throws IOException {\n\t\tPath targetDir = Files.createTempDirectory(\"zip_extract_\");\n\t\ttry (ZipInputStream zis = new ZipInputStream(Files.newInputStream(file.toPath()))) {\n\t\t\tZipEntry entry;\n\t\t\twhile ((entry = zis.getNextEntry()) != null) {\n\t\t\t\tPath newPath = resolveZipEntry(targetDir, entry);\n\t\t\t\tif (entry.isDirectory()) Files.createDirectories(newPath);\n\t\t\t\telse {\n\t\t\t\t\tFiles.createDirectories(newPath.getParent());\n\t\t\t\t\ttry (OutputStream os = Files.newOutputStream(newPath)) {\n\t\t\t\t\t\tzis.transferTo(os);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tzis.closeEntry();\n\t\t\t}\n\t\t}\n\t\treturn targetDir;\n\t}\n\n\tprivate static Path resolveZipEntry(Path targetDir, ZipEntry zipEntry) throws IOException {\n\t\tPath resolvedPath = targetDir.resolve(zipEntry.getName()).normalize();\n\t\tif (!resolvedPath.startsWith(targetDir)) throw new IOException(\"Invalid Entry: \" + zipEntry.getName());\n\t\treturn resolvedPath;\n\t}\n}")));
		return rules;
	}

	public String render(Object object) {
		return new io.intino.itrules.Engine(this).render(object);
	}

	public String render(Object object, java.util.Map<String, io.intino.itrules.Formatter> formatters) {
		return new io.intino.itrules.Engine(this).addAll(formatters).render(object);
	}
}