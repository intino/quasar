rule type(modelreader)
	package $package;

    import $package.$outDsl+firstUpperCase~Graph;
    import io.intino.magritte.builder.StashBuilder;

	import java.io.File;
    import java.io.IOException;
    import java.io.OutputStream;
    import java.net.URISyntaxException;
    import java.net.URL;
    import java.net.http.HttpClient;
    import java.net.http.HttpRequest;
    import java.net.http.HttpResponse;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.time.Duration;
    import java.util.List;
    import java.util.stream.Stream;
    import java.util.zip.ZipEntry;
    import java.util.zip.ZipInputStream;

    public class ModelReader {
    	public static $outDsl+firstUpperCase~Graph loadFromURL(URL url, String authToken) throws IOException, URISyntaxException {
			Path zip = Files.createTempFile("_picota", ".zip");
			authorizedDownload(url, authToken, zip);
			return loadFromZip(zip.toFile());
		}

    	public static $outDsl+firstUpperCase~Graph loadFromURL(URL url) throws IOException {
        	Path zip = Files.createTempFile("_picota", ".zip");
			Files.write(zip, url.openStream().readAllBytes());
			return loadFromZip(zip.toFile());
		}

    	public static $outDsl+firstUpperCase~Graph loadFromZip(File $outDsl~File) throws IOException {
			Path dir = unzip($outDsl~File);
			try (Stream<Path> files = Files.walk(dir)) {
				return load(files
						.filter(Files::isRegularFile)
						.filter(path -> !path.getFileName().toString().startsWith("."))
						.filter(path -> path.getFileName().toString().endsWith(".tara"))
						.map(Path::toFile)
						.toList());
			}
    	}

    	public static $outDsl+firstUpperCase~Graph load(File... $outDsl~File) {
			return load(List.of($outDsl~File));
		}

    	public static $outDsl+firstUpperCase~Graph load(List<File> $outDsl~Files) {
    		return $outDsl+firstUpperCase~Graph.load(new StashBuilder($outDsl~Files, "$outDslCoors", "accessor", System.out).build());
    	}

    	public static void authorizedDownload(URL url, String authToken, Path targetPath) throws IOException, URISyntaxException {
			HttpClient client = HttpClient.newBuilder().connectTimeout(Duration.ofSeconds(10)).build();
			HttpRequest request = HttpRequest.newBuilder()
					.uri(url.toURI())
					.timeout(Duration.ofMinutes(2))
					.header("Authorization", "Bearer " + authToken)
					.GET()
					.build();
			try {
				HttpResponse<Path> response = client.send(request, HttpResponse.BodyHandlers.ofFile(targetPath));
				if (response.statusCode() != 200) throw new RuntimeException("Error HTTP: " + response.statusCode());
			} catch (InterruptedException e) {
				throw new RuntimeException(e);
			}
		}

    	private static Path unzip(java.io.File file) throws IOException {
			Path targetDir = Files.createTempDirectory("zip_extract_");
    		try (ZipInputStream zis = new ZipInputStream(Files.newInputStream(file.toPath()))) {
				ZipEntry entry;
				while ((entry = zis.getNextEntry()) != null) {
					Path newPath = resolveZipEntry(targetDir, entry);
					if (entry.isDirectory()) Files.createDirectories(newPath);
					else {
						Files.createDirectories(newPath.getParent());
						try (OutputStream os = Files.newOutputStream(newPath)) {
							zis.transferTo(os);
						}
					}
					zis.closeEntry();
				}
			}
			return targetDir;
    	}

		private static Path resolveZipEntry(Path targetDir, ZipEntry zipEntry) throws IOException {
			Path resolvedPath = targetDir.resolve(zipEntry.getName()).normalize();
			if (!resolvedPath.startsWith(targetDir)) throw new IOException("Invalid Entry: " + zipEntry.getName());
			return resolvedPath;
		}
    }